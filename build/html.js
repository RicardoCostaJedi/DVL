// Generated by CoffeeScript 1.6.2
var bind, bindSingle, d3, dvl, htmlModule, _ref,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

d3 = require('d3');

dvl = require('./core');

_ref = require('./bind'), bind = _ref.bind, bindSingle = _ref.bindSingle;

htmlModule = {};

htmlModule.resizer = function(_arg) {
  var dimension, onResize, out, selector;

  selector = _arg.selector, out = _arg.out, dimension = _arg.dimension;
  out = dvl.wrapVar(out);
  dimension = dvl.wrap(dimension || 'width');
  onResize = function() {
    var e, val, _dimension;

    _dimension = dimension.value();
    if (_dimension === 'width' || _dimension === 'height') {
      if (selector) {
        e = jQuery(selector);
        val = e[_dimension]();
      } else {
        val = document.body[_dimension === 'width' ? 'clientWidth' : 'clientHeight'];
      }
      return out.value(val);
    } else {
      return out.value(null);
    }
  };
  $(window).resize(onResize);
  dvl.register({
    listen: dimension,
    change: out,
    fn: onResize
  });
  return out;
};

htmlModule.out = function(_arg) {
  var attr, data, fn, format, hideInvalid, invalid, out, selector, style, text, updateHtml, what;

  selector = _arg.selector, data = _arg.data, fn = _arg.fn, format = _arg.format, invalid = _arg.invalid, hideInvalid = _arg.hideInvalid, attr = _arg.attr, style = _arg.style, text = _arg.text;
  if (!data) {
    throw new Error('must have data');
  }
  data = dvl.wrap(data);
  format = format != null ? format : fn;
  if (!selector) {
    throw new Error('must have selector');
  }
  selector = dvl.wrap(selector);
  format = dvl.wrap(format || dvl.identity);
  invalid = dvl.wrap(invalid || null);
  hideInvalid = dvl.wrap(hideInvalid || false);
  if (attr) {
    what = dvl.wrap(attr);
    out = function(selector, string) {
      return d3.select(selector).attr(what.value(), string);
    };
  } else if (style) {
    what = dvl.wrap(style);
    out = function(selector, string) {
      return d3.select(selector).style(what.value(), string);
    };
  } else if (text) {
    out = function(selector, string) {
      return d3.select(selector).text(string);
    };
  } else {
    out = function(selector, string) {
      return d3.select(selector).html(string);
    };
  }
  updateHtml = function() {
    var a, d, inv, s, sel;

    s = selector.value();
    a = format.value();
    d = data.value();
    if (s != null) {
      if ((a != null) && (d != null)) {
        sel = out(s, a(d));
        if (hideInvalid.value()) {
          sel.style('display', null);
        }
      } else {
        inv = invalid.value();
        out(s, inv);
        if (hideInvalid.value()) {
          d3.select(s).style('display', 'none');
        }
      }
    }
  };
  dvl.register({
    listen: [data, selector, format],
    fn: updateHtml
  });
};

htmlModule.list = function(_arg) {
  var classStr, data, extras, highlight, i, icons, label, link, listClass, myOnEnter, myOnLeave, onClick, onEnter, onLeave, onSelect, parent, selection, selections, ul, _i, _len;

  parent = _arg.parent, data = _arg.data, label = _arg.label, link = _arg.link, listClass = _arg["class"], selection = _arg.selection, selections = _arg.selections, onSelect = _arg.onSelect, onEnter = _arg.onEnter, onLeave = _arg.onLeave, icons = _arg.icons, extras = _arg.extras, classStr = _arg.classStr, highlight = _arg.highlight;
  if (!parent) {
    throw new Error('must have parent');
  }
  if (!data) {
    throw new Error('must have data');
  }
  selection = dvl.wrapVar(selection, 'selection');
  selections = dvl.wrapVar(selections || [], 'selections');
  highlight = dvl.wrapVar(highlight, 'highlight');
  data = dvl.wrap(data);
  label = dvl.wrap(label || dvl.identity);
  link = dvl.wrap(link);
  icons || (icons = []);
  for (_i = 0, _len = icons.length; _i < _len; _i++) {
    i = icons[_i];
    i.position || (i.position = 'right');
  }
  if (listClass != null) {
    listClass = dvl.wrap(listClass);
  } else {
    listClass = dvl.applyAlways([selection, selections, highlight], function(_selection, _selections, _highlight) {
      return function(d) {
        var classParts;

        classParts = [];
        if (_selection) {
          classParts.push(d === _selection ? 'is_selection' : 'isnt_selection');
        }
        if (_selections) {
          classParts.push(__indexOf.call(_selections, d) >= 0 ? 'is_selections' : 'isnt_selections');
        }
        if (_highlight) {
          classParts.push(d === _highlight ? 'is_highlight' : 'isnt_highlight');
        }
        if (classParts.length) {
          return classParts.join(' ');
        } else {
          return null;
        }
      };
    });
  }
  ul = dvl.valueOf(parent).append('ul').attr('class', classStr);
  onClick = dvl.group(function(val, i) {
    var linkVal, _base, _selections;

    if ((typeof onSelect === "function" ? onSelect(val, i) : void 0) === false) {
      return;
    }
    linkVal = typeof (_base = link.value()) === "function" ? _base(val) : void 0;
    selection.value(val);
    _selections = (selections.value() || []).slice();
    i = _selections.indexOf(val);
    if (i === -1) {
      _selections.push(val);
    } else {
      _selections.splice(i, 1);
    }
    selections.value(_selections);
    if (linkVal) {
      window.location.href = linkVal;
    }
  });
  myOnEnter = function(val) {
    if ((typeof onEnter === "function" ? onEnter(val) : void 0) === false) {
      return;
    }
    highlight.value(val);
  };
  myOnLeave = function(val) {
    if ((typeof onLeave === "function" ? onLeave(val) : void 0) === false) {
      return;
    }
    if (highlight.value() === val) {
      highlight.value("");
    }
  };
  dvl.register({
    name: 'update_html_list',
    listen: [data, label, link],
    fn: function() {
      var a, addIcons, cont, sel, _class, _data, _label, _link;

      _data = data.value();
      _label = label.value();
      _link = link.value();
      _class = listClass.value();
      if (!_data) {
        return;
      }
      _data = _data.valueOf();
      addIcons = function(el, position) {
        icons.forEach(function(icon) {
          if (icon.position !== position) {
            return;
          }
          classStr = 'icon_cont ' + position;
          if (icon.classStr) {
            classStr += ' ' + icon.classStr;
          }
          el.append('div').attr('class', classStr).attr('title', icon.title).on('click', function(val, i) {
            if ((typeof icon.onSelect === "function" ? icon.onSelect(val, i) : void 0) === false) {
              d3.event.stopPropagation();
            }
          }).on('mouseover', function(val, i) {
            if ((typeof icon.onEnter === "function" ? icon.onEnter(val, i) : void 0) === false) {
              d3.event.stopPropagation();
            }
          }).on('mouseout', function(val, i) {
            if ((typeof icon.onLeave === "function" ? icon.onLeave(val, i) : void 0) === false) {
              d3.event.stopPropagation();
            }
          }).append('div').attr('class', 'icon');
        });
      };
      sel = ul.selectAll('li').data(_data);
      a = sel.enter().append('li').append('a');
      addIcons(a, 'left');
      a.append('span');
      addIcons(a, 'right');
      cont = sel.attr('class', _class).on('click', onClick).on('mouseover', myOnEnter).on('mouseout', myOnLeave).select('a').attr('href', _link);
      cont.select('span').text(_label);
      sel.exit().remove();
    }
  });
  dvl.register({
    name: 'update_class_list',
    listen: [listClass],
    fn: function() {
      var _class;

      _class = listClass.value();
      ul.selectAll('li').attr('class', _class);
    }
  });
  return {
    selection: selection,
    selections: selections,
    node: ul.node()
  };
};

htmlModule.combobox = function(_arg) {
  var classStr, data, disabled, divCont, filterCharacters, filteredData, focus, highlight, icons, id, keepOnClick, label, link, listClass, menuAnchor, menuCont, menuOpen, myOnSelect, namespace, onEnter, onLeave, onSelect, parent, selection, selectionLabel, selections, title, updateScroll, valueOut;

  parent = _arg.parent, classStr = _arg.classStr, data = _arg.data, label = _arg.label, selectionLabel = _arg.selectionLabel, link = _arg.link, listClass = _arg["class"], id = _arg.id, selection = _arg.selection, selections = _arg.selections, onSelect = _arg.onSelect, onEnter = _arg.onEnter, onLeave = _arg.onLeave, menuAnchor = _arg.menuAnchor, title = _arg.title, icons = _arg.icons, keepOnClick = _arg.keepOnClick, disabled = _arg.disabled, highlight = _arg.highlight, focus = _arg.focus;
  if (!parent) {
    throw new Error('must have parent');
  }
  if (!data) {
    throw new Error('must have data');
  }
  selection = dvl.wrapVar(selection, 'selection');
  selections = dvl.wrapVar(selections, 'selections');
  menuAnchor = dvl.wrap(menuAnchor || 'left');
  data = dvl.wrap(data);
  label = dvl.wrap(label || dvl.identity);
  selectionLabel = dvl.wrap(selectionLabel || label);
  link = dvl.wrap(link);
  disabled = dvl.wrap(disabled != null ? disabled : false);
  focus = dvl.wrapVar(focus);
  filterCharacters = dvl.wrapVar([]).compare(false);
  filteredData = dvl.def();
  dvl.register({
    listen: data,
    fn: function() {
      var _data, _selection;

      _data = data.value();
      _selection = selection.value();
      if (!_data || __indexOf.call(_data, _selection) < 0) {
        setTimeout((function() {
          return selection.value(null);
        }), 0);
      }
    }
  });
  dvl.register({
    listen: filterCharacters,
    label: label,
    data: data,
    change: filteredData,
    fn: function() {
      var _data, _filterCharacters, _filterPhrase, _filteredData, _label;

      _data = data.value();
      _filterCharacters = filterCharacters.value();
      _label = label.value();
      if (!(_data && _filterCharacters)) {
        return;
      }
      _filterPhrase = _filterCharacters.join('');
      _filteredData = _data.filter(function(datum) {
        var _ref1;

        return ((_ref1 = String(_label(datum))) != null ? _ref1.toLowerCase().indexOf(_filterPhrase) : void 0) > -1;
      });
      return filteredData.value(_filteredData);
    }
  });
  if (title) {
    title = dvl.wrap(title);
  }
  icons || (icons = []);
  menuOpen = dvl(false);
  dvl.register({
    listen: menuOpen,
    change: filterCharacters,
    fn: function() {
      return filterCharacters.value([]);
    }
  });
  divCont = bindSingle({
    parent: parent,
    self: 'div',
    attr: {
      "class": dvl.applyAlways({
        args: [classStr, menuOpen, disabled],
        fn: function(_classStr, _menuOpen, _disabled) {
          return [_classStr || '', _menuOpen ? 'open' : 'closed', _disabled ? 'disabled' : ''].join(' ');
        }
      })
    },
    style: {
      position: 'relative'
    }
  }).value();
  valueOut = bindSingle({
    parent: divCont,
    self: 'input.title-cont',
    attr: {
      disabled: dvl.op.iff(disabled, '', null),
      tabIndex: 0,
      id: id
    },
    on: {
      blur: function() {
        focus.value(false);
      }
    }
  }).value();
  updateScroll = function() {
    var element, pos, selectionIndex, _data, _menuCont, _selection;

    _data = data.value();
    _selection = selection.value();
    if (!_data) {
      return;
    }
    selectionIndex = _data.indexOf(_selection);
    if (selectionIndex === -1) {
      return;
    }
    _menuCont = menuCont.node();
    if (_menuCont.scrollHeight === 0) {
      return;
    }
    element = menuCont.selectAll('li')[0][selectionIndex];
    pos = $(element).position();
    if (!pos) {
      return;
    }
    _menuCont.scrollTop = 0;
    _menuCont.scrollTop = pos.top;
  };
  valueOut.on('keydown', (function() {
    var keyCode, selectionIndex, _data, _filterCharacters, _label, _selection;

    _data = data.value();
    if (!_data) {
      return;
    }
    _label = label.value();
    if (!_label) {
      return;
    }
    keyCode = d3.event.which || d3.event.keyCode;
    if (keyCode === 9) {
      menuOpen.value(false);
      return;
    }
    if (keyCode === 38 || keyCode === 40) {
      d3.event.stopPropagation();
      d3.event.preventDefault();
      if (!menuOpen.value()) {
        menuOpen.value(true);
      }
      _selection = selection.value();
      selectionIndex = _data.indexOf(_selection);
      if (selectionIndex === -1) {
        if (_selection === null) {
          if (_data.length) {
            selection.value(_data[0]);
          }
        } else {
          throw "selection was not found in data";
        }
      } else {
        if (keyCode === 38) {
          selectionIndex--;
        } else {
          selectionIndex++;
        }
        selectionIndex += _data.length;
        selectionIndex %= _data.length;
        selection.value(_data[selectionIndex]);
        updateScroll();
      }
    }
    if (keyCode === 13 || keyCode === 27) {
      d3.event.stopPropagation();
      d3.event.preventDefault();
      menuOpen.value(false);
    }
    if (keyCode === 8) {
      _filterCharacters = filterCharacters.value();
      _filterCharacters.pop();
      filterCharacters.value(_filterCharacters);
    }
  }), true).on('keypress', (function() {
    var keyCode, _data, _filterCharacters, _label;

    _data = data.value();
    if (!_data) {
      return;
    }
    _label = label.value();
    if (!_label) {
      return;
    }
    keyCode = d3.event.which || d3.event.keyCode;
    if (!(keyCode === 9 || keyCode === 38 || keyCode === 40 || keyCode === 13 || keyCode === 27)) {
      _filterCharacters = filterCharacters.value();
      _filterCharacters.push(String.fromCharCode(keyCode).toLowerCase());
      filterCharacters.value(_filterCharacters);
    }
  }), true);
  dvl.register({
    listen: [focus],
    fn: function() {
      var _focus, _valueOut;

      _focus = focus.value();
      if (_focus == null) {
        return;
      }
      _valueOut = valueOut.node();
      if (_focus === (_valueOut === document.activeElement)) {
        return;
      }
      setTimeout((function() {
        if (_focus) {
          _valueOut.focus();
        } else {
          _valueOut.blur();
        }
      }), 0);
    }
  });
  myOnSelect = function(text, i) {
    if (!keepOnClick) {
      menuOpen.value(false);
    }
    return typeof onSelect === "function" ? onSelect(text, i) : void 0;
  };
  icons.forEach(function(icon) {
    var icon_onSelect;

    icon_onSelect = icon.onSelect;
    icon.onSelect = function(val, i) {
      if (!keepOnClick) {
        menuOpen.value(false);
      }
      return typeof icon_onSelect === "function" ? icon_onSelect(val, i) : void 0;
    };
  });
  menuCont = divCont.append('div').attr('class', 'menu-cont').style('position', 'absolute').style('z-index', 1000);
  dvl.register({
    listen: [menuOpen, menuAnchor],
    fn: function() {
      var _menuAnchor, _menuOpen;

      _menuOpen = menuOpen.value();
      if (_menuOpen) {
        menuCont.style('display', null).style('top', '100%');
        _menuAnchor = menuAnchor.value();
        if (_menuAnchor === 'left') {
          menuCont.style('left', 0).style('right', null);
        } else {
          menuCont.style('left', null).style('right', 0);
        }
      } else {
        menuCont.style('display', 'none');
      }
    }
  });
  htmlModule.list({
    parent: menuCont,
    classStr: 'list',
    data: filteredData,
    label: label,
    link: link,
    "class": listClass,
    selection: selection,
    selections: selections,
    onSelect: myOnSelect,
    onEnter: onEnter,
    onLeave: onLeave,
    icons: icons
  });
  namespace = dvl.namespace('dropdown');
  d3.select(window).on("click." + namespace, (function() {
    var target;

    target = d3.event.target;
    if (disabled.value()) {
      return;
    }
    if ($(menuCont.node()).find(target).length) {
      return;
    }
    if (divCont.node() === target || $(divCont.node()).find(target).length) {
      menuOpen.value(!menuOpen.value());
    } else {
      menuOpen.value(false);
    }
  }), true).on("blur." + namespace, function() {
    menuOpen.value(false);
  });
  dvl.register({
    name: 'selection_updater',
    listen: [menuOpen, selection, selectionLabel, title],
    fn: function() {
      var sel, selLabel, titleText;

      if (menuOpen.value()) {
        valueOut.property('value', '');
        return;
      }
      if (title) {
        titleText = title.value();
      } else {
        sel = selection.value();
        selLabel = selectionLabel.value();
        titleText = selLabel ? selLabel(sel) : '';
      }
      valueOut.property('value', titleText != null ? titleText : '');
    }
  });
  return {
    node: divCont.node(),
    menuCont: menuCont.node(),
    open: menuOpen,
    focus: focus,
    selection: selection,
    selections: selections
  };
};

htmlModule.dropdown = function(_arg) {
  var classStr, data, disabled, divCont, focus, highlight, icons, id, keepOnClick, label, link, listClass, menuAnchor, menuCont, menuOpen, myOnSelect, namespace, onEnter, onLeave, onSelect, parent, selection, selectionLabel, selections, title, updateScroll, valueOut;

  parent = _arg.parent, classStr = _arg.classStr, data = _arg.data, label = _arg.label, selectionLabel = _arg.selectionLabel, link = _arg.link, listClass = _arg["class"], id = _arg.id, selection = _arg.selection, selections = _arg.selections, onSelect = _arg.onSelect, onEnter = _arg.onEnter, onLeave = _arg.onLeave, menuAnchor = _arg.menuAnchor, title = _arg.title, icons = _arg.icons, keepOnClick = _arg.keepOnClick, disabled = _arg.disabled, highlight = _arg.highlight, focus = _arg.focus;
  if (!parent) {
    throw new Error('must have parent');
  }
  if (!data) {
    throw new Error('must have data');
  }
  selection = dvl.wrapVar(selection, 'selection');
  selections = dvl.wrapVar(selections, 'selections');
  menuAnchor = dvl.wrap(menuAnchor || 'left');
  data = dvl.wrap(data);
  label = dvl.wrap(label || dvl.identity);
  selectionLabel = dvl.wrap(selectionLabel || label);
  link = dvl.wrap(link);
  disabled = dvl.wrap(disabled != null ? disabled : false);
  focus = dvl.wrapVar(focus);
  dvl.register({
    listen: data,
    fn: function() {
      var _data, _selection;

      _data = data.value();
      _selection = selection.value();
      if (!_data || __indexOf.call(_data, _selection) < 0) {
        setTimeout((function() {
          return selection.value(null);
        }), 0);
      }
    }
  });
  if (title) {
    title = dvl.wrap(title);
  }
  icons || (icons = []);
  menuOpen = dvl(false);
  divCont = bindSingle({
    parent: parent,
    self: 'div',
    attr: {
      "class": dvl.applyAlways({
        args: [classStr, menuOpen, disabled],
        fn: function(_classStr, _menuOpen, _disabled) {
          return [_classStr || '', _menuOpen ? 'open' : 'closed', _disabled ? 'disabled' : ''].join(' ');
        }
      })
    },
    style: {
      position: 'relative'
    }
  }).value();
  valueOut = bindSingle({
    parent: divCont,
    self: 'div.title-cont',
    attr: {
      disabled: dvl.op.iff(disabled, '', null),
      tabIndex: 0,
      id: id
    },
    on: {
      blur: function() {
        focus.value(false);
      }
    },
    text: title || dvl.applyAlways(selection, label)
  }).value();
  updateScroll = function() {
    var element, selectionIndex, _data, _menuCont, _selection;

    _data = data.value();
    _selection = selection.value();
    if (!_data) {
      return;
    }
    selectionIndex = _data.indexOf(_selection);
    if (selectionIndex === -1) {
      return;
    }
    _menuCont = menuCont.node();
    if (_menuCont.scrollHeight === 0) {
      return;
    }
    element = menuCont.selectAll('li')[0][selectionIndex];
    _menuCont.scrollTop = 0;
    _menuCont.scrollTop = $(element).position().top;
  };
  valueOut.on('keydown', (function() {
    var keyCode, selectionIndex, _data, _label, _selection;

    _data = data.value();
    if (!_data) {
      return;
    }
    _label = label.value();
    if (!_label) {
      return;
    }
    keyCode = d3.event.which || d3.event.keyCode;
    if (keyCode === 9) {
      menuOpen.value(false);
      return;
    }
    if (keyCode === 38 || keyCode === 40) {
      d3.event.stopPropagation();
      d3.event.preventDefault();
      if (!menuOpen.value()) {
        menuOpen.value(true);
      }
      _selection = selection.value();
      selectionIndex = _data.indexOf(_selection);
      if (selectionIndex === -1) {
        if (_selection === null) {
          if (_data.length) {
            selection.value(_data[0]);
          }
        } else {
          throw "selection was not found in data";
        }
      } else {
        if (keyCode === 38) {
          selectionIndex--;
        } else {
          selectionIndex++;
        }
        selectionIndex += _data.length;
        selectionIndex %= _data.length;
        selection.value(_data[selectionIndex]);
        updateScroll();
      }
    }
    if (keyCode === 13 || keyCode === 27) {
      d3.event.stopPropagation();
      d3.event.preventDefault();
      menuOpen.value(false);
    }
  }), true).on('keypress', (function() {
    var datum, keyCode, userChar, _data, _i, _label, _len;

    _data = data.value();
    if (!_data) {
      return;
    }
    _label = label.value();
    if (!_label) {
      return;
    }
    keyCode = d3.event.which || d3.event.keyCode;
    userChar = String.fromCharCode(keyCode).toLowerCase();
    if (userChar && !(keyCode === 9 || keyCode === 38 || keyCode === 40 || keyCode === 13 || keyCode === 27)) {
      for (_i = 0, _len = _data.length; _i < _len; _i++) {
        datum = _data[_i];
        if (datum && _label(datum).charAt(0).toLowerCase() === userChar) {
          selection.value(datum);
          updateScroll();
          break;
        }
      }
    }
  }), true);
  dvl.register({
    listen: [focus],
    fn: function() {
      var _focus, _valueOut;

      _focus = focus.value();
      if (_focus == null) {
        return;
      }
      _valueOut = valueOut.node();
      if (_focus === (_valueOut === document.activeElement)) {
        return;
      }
      setTimeout((function() {
        if (_focus) {
          _valueOut.focus();
        } else {
          _valueOut.blur();
        }
      }), 0);
    }
  });
  myOnSelect = function(text, i) {
    if (!keepOnClick) {
      menuOpen.value(false);
    }
    return typeof onSelect === "function" ? onSelect(text, i) : void 0;
  };
  icons.forEach(function(icon) {
    var icon_onSelect;

    icon_onSelect = icon.onSelect;
    icon.onSelect = function(val, i) {
      if (!keepOnClick) {
        menuOpen.value(false);
      }
      return typeof icon_onSelect === "function" ? icon_onSelect(val, i) : void 0;
    };
  });
  menuCont = divCont.append('div').attr('class', 'menu-cont').style('position', 'absolute').style('z-index', 1000);
  dvl.register({
    listen: [menuOpen, menuAnchor],
    fn: function() {
      var _menuAnchor, _menuOpen;

      _menuOpen = menuOpen.value();
      if (_menuOpen) {
        menuCont.style('display', null).style('top', '100%');
        _menuAnchor = menuAnchor.value();
        if (_menuAnchor === 'left') {
          menuCont.style('left', 0).style('right', null);
        } else {
          menuCont.style('left', null).style('right', 0);
        }
      } else {
        menuCont.style('display', 'none');
      }
    }
  });
  htmlModule.list({
    parent: menuCont,
    classStr: 'list',
    data: data,
    label: label,
    link: link,
    "class": listClass,
    selection: selection,
    selections: selections,
    onSelect: myOnSelect,
    onEnter: onEnter,
    onLeave: onLeave,
    icons: icons
  });
  namespace = dvl.namespace('dropdown');
  d3.select(window).on("click." + namespace, (function() {
    var target;

    target = d3.event.target;
    if (disabled.value()) {
      return;
    }
    if ($(menuCont.node()).find(target).length) {
      return;
    }
    if (divCont.node() === target || $(divCont.node()).find(target).length) {
      menuOpen.value(!menuOpen.value());
    } else {
      menuOpen.value(false);
    }
  }), true).on("blur." + namespace, function() {
    menuOpen.value(false);
  });
  dvl.register({
    name: 'selection_updater',
    listen: [selection, selectionLabel, title],
    fn: function() {
      var sel, selLabel, titleText;

      if (title) {
        titleText = title.value();
      } else {
        sel = selection.value();
        selLabel = selectionLabel.value();
        titleText = selLabel ? selLabel(sel) : '';
      }
      valueOut.property('value', titleText != null ? titleText : '');
    }
  });
  return {
    node: divCont.node(),
    menuCont: menuCont.node(),
    open: menuOpen,
    focus: focus,
    selection: selection,
    selections: selections
  };
};

htmlModule.select = function(_arg) {
  var classStr, data, focus, id, label, onChange, parent, selChange, selectEl, selection, value, visible;

  parent = _arg.parent, data = _arg.data, classStr = _arg.classStr, value = _arg.value, label = _arg.label, selection = _arg.selection, id = _arg.id, onChange = _arg.onChange, focus = _arg.focus, visible = _arg.visible;
  if (!parent) {
    throw new Error('must have parent');
  }
  if (!data) {
    throw new Error('must have data');
  }
  selection = dvl.wrapVar(selection, 'selection');
  focus = dvl.wrapVar(focus != null ? focus : false);
  visible = dvl.wrap(visible != null ? visible : true);
  data = dvl.wrap(data);
  value || (value = label);
  value = dvl.wrap(value || String);
  selChange = function() {
    var i, val, _data, _selectEl;

    _data = data.value();
    if (_data) {
      _data = _data.valueOf();
      _selectEl = selectEl.value();
      i = _selectEl.property('value');
      val = _data[i];
      if ((typeof onChange === "function" ? onChange(val) : void 0) === false) {
        return;
      }
      selection.value(val);
    } else {
      selection.value(null);
    }
  };
  selectEl = bindSingle({
    parent: parent,
    self: 'select',
    attr: {
      id: id,
      "class": classStr
    },
    style: {
      display: dvl.op.iff(visible, null, 'none')
    },
    on: {
      change: selChange,
      focus: function() {
        focus.value(true);
      },
      blur: function() {
        focus.value(false);
      }
    }
  });
  bind({
    parent: selectEl,
    self: 'option',
    data: data,
    attr: {
      value: function(d, i) {
        return i;
      }
    },
    text: value
  });
  dvl.register({
    listen: [data, selection],
    fn: function() {
      var idx, _data, _selectEl, _selection;

      _data = data.value();
      _selection = selection.value();
      if (!_data) {
        return;
      }
      _data = _data.valueOf();
      idx = _data.indexOf(_selection);
      _selectEl = selectEl.value();
      if (_selectEl.property('value') !== idx) {
        _selectEl.property('value', idx);
      }
    }
  });
  dvl.register({
    listen: [selectEl, focus],
    fn: function() {
      var _focus, _selectEl;

      _selectEl = selectEl.value();
      _focus = focus.value();
      if (!(_selectEl && (_focus != null))) {
        return;
      }
      _selectEl = _selectEl.node();
      return _focus === (_selectEl === document.activeElement);
      if (_focus) {
        _selectEl.focus();
      } else {
        _selectEl.blur();
      }
    }
  });
  selChange();
  return {
    node: selectEl.value(),
    selection: selection,
    focus: focus
  };
};

dvl.compare = function(acc, reverse) {
  acc = dvl.wrap(acc || dvl.identity);
  reverse = dvl.wrap(reverse || false);
  return dvl.apply({
    args: [acc, reverse],
    fn: function(acc, reverse) {
      var cmp;

      cmp = reverse ? d3.descending : d3.ascending;
      return function(a, b) {
        return cmp(acc(a), acc(b));
      };
    }
  });
};

(function() {
  var addPxIfNeeded, defaultCompareModes, numberRegEx;

  defaultCompareModes = ['up', 'down'];
  numberRegEx = /\d+(?:\.\d+)?/;
  addPxIfNeeded = function(str) {
    if (str == null) {
      return null;
    }
    if (numberRegEx.test(str)) {
      return str + 'px';
    } else {
      return str;
    }
  };
  htmlModule.table = function(_arg) {
    var bodyCol, c, classStr, columns, comp, compare, compareList, compareMap, data, headParent, headTable, headerCol, onRow, parent, rowClass, rowLimit, sort, sortDir, sortOn, sortOnIndicator, table, _i, _len, _ref1;

    parent = _arg.parent, headParent = _arg.headParent, data = _arg.data, sort = _arg.sort, classStr = _arg.classStr, rowClass = _arg.rowClass, rowLimit = _arg.rowLimit, columns = _arg.columns, onRow = _arg.on;
    table = bindSingle({
      parent: parent,
      self: 'table',
      attr: {
        "class": classStr
      }
    });
    if (headParent) {
      headTable = bindSingle({
        parent: headParent,
        self: 'table',
        attr: {
          "class": (classStr != null ? classStr : '') + ' head'
        }
      });
    } else {
      headTable = table;
    }
    sort || (sort = {});
    sortOn = dvl.wrapVar(sort.on);
    sortDir = dvl.wrapVar(sort.dir);
    sortOnIndicator = dvl.wrapVar((_ref1 = sort.onIndicator) != null ? _ref1 : sortOn);
    headerCol = [];
    bodyCol = [];
    compareMap = {};
    compareList = [sortOn, sortDir];
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      c = columns[_i];
      if (c.sortable) {
        if (c.compare != null) {
          comp = dvl.wrap(c.compare);
        } else {
          if (c.ignoreCase) {
            comp = dvl.compare(dvl.chain(c.value, function(d) {
              if (d) {
                return d.toLowerCase();
              } else {
                return d;
              }
            }));
          } else {
            comp = dvl.compare(c.value);
          }
        }
        compareMap[c.id] = comp;
        compareList.push(comp);
        if (!c.compareModes) {
          c.compareModes = defaultCompareModes;
        }
      }
      headerCol.push({
        id: c.id,
        title: c.title,
        "class": (c["class"] || '') + (c.sortable ? ' sortable' : ''),
        visible: c.visible,
        tooltip: c.headerTooltip,
        width: c.width
      });
      bodyCol.push({
        id: c.id,
        "class": c["class"],
        visible: c.visible,
        value: c.value,
        hover: c.hover,
        render: c.render,
        on: c.on,
        width: c.width
      });
    }
    headerCol.forEach(function(c) {
      c.indicator = dvl.applyAlways([sortOn, sortDir], function(_sortOn, _sortDir) {
        if (_sortOn === c.id) {
          return _sortDir || 'none';
        } else {
          return 'none';
        }
      });
    });
    compare = dvl(null);
    dvl.register({
      listen: compareList,
      change: [compare],
      fn: function() {
        var cmp, oldCmp, _ref2, _sortDir, _sortOn;

        _sortOn = sortOn.value();
        _sortDir = sortDir.value();
        if (_sortOn != null) {
          cmp = (_ref2 = compareMap[_sortOn]) != null ? _ref2.value() : void 0;
          if (cmp && _sortDir === 'down') {
            oldCmp = cmp;
            cmp = function(a, b) {
              return oldCmp(b, a);
            };
          }
          compare.value(cmp);
        } else {
          compare.value(null);
        }
      }
    });
    htmlModule.table.header({
      parent: headTable,
      columns: headerCol,
      onClick: function(id) {
        var column, compareModes, _j, _len1;

        column = null;
        for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
          c = columns[_j];
          if (c.id === id) {
            column = c;
            break;
          }
        }
        if (!(column && column.sortable)) {
          return;
        }
        compareModes = column.compareModes;
        if (id === sortOn.value()) {
          sortDir.set(compareModes[(compareModes.indexOf(sortDir.value()) + 1) % compareModes.length]);
          dvl.notify(sortDir);
        } else {
          sortOn.set(id);
          sortDir.set(compareModes[0]);
          dvl.notify(sortOn, sortDir);
        }
      }
    });
    htmlModule.table.body({
      parent: table,
      classStr: 'data',
      data: data,
      rowClass: rowClass,
      rowLimit: rowLimit,
      columns: bodyCol,
      compare: compare,
      on: onRow
    });
    return {
      node: table
    };
  };
  htmlModule.table.header = function(_arg) {
    var c, columns, enterLiner, enterTh, headerRow, listen, nc, newColumns, onClick, parent, sel, thead, _i, _len, _ref1;

    parent = _arg.parent, columns = _arg.columns, onClick = _arg.onClick;
    if (!parent) {
      throw new Error('there needs to be a parent');
    }
    onClick = dvl.wrap(onClick);
    thead = dvl.valueOf(parent).append('thead');
    headerRow = thead.append('tr');
    listen = [onClick];
    newColumns = [];
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      c = columns[_i];
      newColumns.push(nc = {
        id: c.id,
        title: dvl.wrap(c.title),
        "class": dvl.wrap(c["class"]),
        visible: dvl.wrap((_ref1 = c.visible) != null ? _ref1 : true),
        tooltip: dvl.wrap(c.tooltip),
        indicator: c.indicator ? dvl.wrap(c.indicator) : void 0,
        width: dvl.wrap(c.width)
      });
      listen.push(nc.title, nc["class"], nc.visible, nc.tooltip, nc.indicator, nc.width);
    }
    columns = newColumns;
    sel = headerRow.selectAll('th').data(columns);
    enterTh = sel.enter().append('th');
    enterLiner = enterTh.append('div').attr('class', 'liner');
    enterLiner.append('span');
    enterLiner.append('div').attr('class', 'indicator').style('display', 'none');
    sel.exit().remove();
    dvl.register({
      name: 'header_render',
      listen: listen,
      fn: function() {
        var i, ind, visibleChanged, w, _indicator, _j, _len1;

        for (i = _j = 0, _len1 = columns.length; _j < _len1; i = ++_j) {
          c = columns[i];
          sel = headerRow.select("th:nth-child(" + (i + 1) + ")");
          visibleChanged = c.visible.hasChanged();
          if (c.visible.value()) {
            sel.datum(c);
            if (c["class"].hasChanged() || visibleChanged) {
              sel.attr('class', c["class"].value());
            }
            if (c.tooltip.hasChanged() || visibleChanged) {
              sel.attr('title', c.tooltip.value());
            }
            if (c.width.hasChanged() || visibleChanged) {
              w = addPxIfNeeded(c.width.value());
              sel.style('min-width', w).style('width', w).style('max-width', w);
            }
            if (visibleChanged) {
              sel.style('display', null);
            }
            if (onClick.hasChanged() || visibleChanged) {
              sel.on('click', function(d) {
                var _base;

                return typeof (_base = onClick.value()) === "function" ? _base(d.id) : void 0;
              });
            }
            if (c.title.hasChanged() || visibleChanged) {
              sel.select('span').text(c.title.value());
            }
            if (c.indicator && (c.indicator.hasChanged() || visibleChanged)) {
              _indicator = c.indicator.value();
              ind = sel.select('div.indicator');
              if (_indicator) {
                ind.style('display', null).attr('class', 'indicator ' + _indicator);
              } else {
                ind.style('display', 'none');
              }
            }
          } else {
            if (visibleChanged) {
              sel.style('display', 'none');
            }
          }
        }
      }
    });
    return {
      node: thead
    };
  };
  htmlModule.table.body = function(_arg) {
    var c, change, classStr, columns, compare, data, k, listen, nc, newColumns, onRow, onRowNew, parent, render, rowClass, rowLimit, tbody, v, _i, _j, _len, _len1, _ref1, _ref2;

    parent = _arg.parent, data = _arg.data, compare = _arg.compare, rowClass = _arg.rowClass, classStr = _arg.classStr, rowLimit = _arg.rowLimit, columns = _arg.columns, onRow = _arg.on;
    if (!parent) {
      throw new Error('there needs to be a parent');
    }
    if (!data) {
      throw new Error('there needs to be data');
    }
    tbody = dvl.valueOf(parent).append('tbody').attr('class', classStr);
    compare = dvl.wrap(compare);
    if (rowClass != null) {
      rowClass = dvl.wrap(rowClass);
    }
    rowLimit = dvl.wrap(rowLimit);
    listen = [data, compare, rowClass, rowLimit];
    change = [];
    onRowNew = {};
    for (k in onRow) {
      v = onRow[k];
      v = dvl.wrap(v);
      listen.push(v);
      onRowNew[k] = v;
    }
    onRow = onRowNew;
    newColumns = [];
    for (_i = 0, _len = columns.length; _i < _len; _i++) {
      c = columns[_i];
      newColumns.push(nc = {
        id: c.id,
        "class": dvl.wrap(c["class"]),
        visible: dvl.wrap((_ref1 = c.visible) != null ? _ref1 : true),
        hover: dvl.wrap(c.hover),
        value: dvl.wrap(c.value),
        width: dvl.wrap(c.width)
      });
      listen.push(nc["class"], nc.visible, nc.hover, nc.width);
      nc.render = c.render || 'text';
      nc.on = {};
      _ref2 = c.on;
      for (k in _ref2) {
        v = _ref2[k];
        v = dvl.wrap(v);
        listen.push(v);
        nc.on[k] = v;
      }
      change.push(nc.selection = dvl().name("" + c.id + "_selection"));
    }
    columns = newColumns;
    dvl.register({
      name: 'body_render',
      listen: listen,
      change: change,
      fn: function() {
        var colSel, dataSorted, enterRowSel, i, rowSel, sel, visibleChanged, w, _compare, _j, _len1, _ref3, _rowClass, _rowLimit;

        dataSorted = (data.value() || []).valueOf();
        _compare = compare.value();
        if (_compare) {
          dataSorted = dataSorted.slice().sort(_compare);
        }
        _rowLimit = rowLimit.value();
        if (_rowLimit != null) {
          dataSorted = dataSorted.slice(0, _rowLimit);
        }
        rowSel = tbody.selectAll('tr').data(dataSorted);
        enterRowSel = rowSel.enter().append('tr');
        rowSel.exit().remove();
        if (rowClass) {
          _rowClass = rowClass.value();
          rowSel.attr('class', _rowClass);
        }
        for (k in onRow) {
          v = onRow[k];
          rowSel.on(k, v.value());
        }
        colSel = rowSel.selectAll('td').data(columns);
        colSel.enter().append('td');
        colSel.exit().remove();
        for (i = _j = 0, _len1 = columns.length; _j < _len1; i = ++_j) {
          c = columns[i];
          sel = tbody.selectAll("td:nth-child(" + (i + 1) + ")").data(dataSorted);
          visibleChanged = c.visible.hasChanged() || data.hasChanged();
          if (c.visible.value()) {
            if (c["class"].hasChanged() || visibleChanged) {
              sel.attr('class', c["class"].value());
            }
            if (c.hover.hasChanged() || visibleChanged) {
              sel.attr('title', c.hover.value());
            }
            if (c.width.hasChanged() || visibleChanged) {
              w = addPxIfNeeded(c.width.value());
              sel.style('min-width', w).style('width', w).style('max-width', w);
            }
            if (visibleChanged) {
              sel.style('display', null);
            }
            _ref3 = c.on;
            for (k in _ref3) {
              v = _ref3[k];
              if (v.hasChanged() || visibleChanged) {
                sel.on(k, v.value());
              }
            }
            c.selection.set(sel).notify();
          } else {
            if (visibleChanged) {
              sel.style('display', 'none');
            }
          }
        }
      }
    });
    for (_j = 0, _len1 = columns.length; _j < _len1; _j++) {
      c = columns[_j];
      render = typeof c.render === 'function' ? c.render : htmlModule.table.render[c.render];
      render.call(c, c.selection, c.value);
    }
    return {
      node: tbody
    };
  };
  return htmlModule.table.render = {
    text: function(selection, value) {
      dvl.register({
        listen: [selection, value],
        fn: function() {
          var _selection, _value;

          _selection = selection.value();
          _value = value.value();
          if ((_selection != null) && _value) {
            _selection.text(_value);
          }
          return selection;
        }
      });
    },
    html: function(selection, value) {
      dvl.register({
        listen: [selection, value],
        fn: function() {
          var _selection, _value;

          _selection = selection.value();
          _value = value.value();
          if ((_selection != null) && _value) {
            _selection.html(_value);
          }
          return selection;
        }
      });
    },
    aLink: function(_arg) {
      var href;

      href = _arg.href;
      return function(selection, value) {
        return bind({
          parent: selection,
          self: 'a.link',
          attr: {
            href: href
          },
          text: value
        });
      };
    },
    img: function(selection, value) {
      return bind({
        parent: selection,
        self: 'img',
        attr: {
          src: value
        }
      });
    },
    imgDiv: function(selection, value) {
      return bind({
        parent: selection,
        self: 'div',
        attr: {
          "class": value
        }
      });
    },
    button: function(_arg) {
      var classStr, onObj;

      classStr = _arg.classStr, onObj = _arg.on;
      return function(selection, value) {
        return bind({
          parent: selection,
          self: 'button',
          attr: {
            "class": classStr
          },
          on: onObj,
          text: value
        });
      };
    },
    sparkline: function(_arg) {
      var height, padding, width, x, y;

      width = _arg.width, height = _arg.height, x = _arg.x, y = _arg.y, padding = _arg.padding;
      if (padding == null) {
        padding = 0;
      }
      return function(selection, value) {
        var dataFn, lineFn, svg;

        lineFn = dvl.apply({
          args: [x, y, padding],
          fn: function(x, y, padding) {
            return function(d) {
              var sx, sy;

              sx = d3.scale.linear().domain(d3.extent(d, function(d) {
                return d[x];
              })).range([padding, width - padding]);
              sy = d3.scale.linear().domain(d3.extent(d, function(d) {
                return d[y];
              })).range([height - padding, padding]);
              return d3.svg.line().x(function(dp) {
                return sx(dp[x]);
              }).y(function(dp) {
                return sy(dp[y]);
              })(d);
            };
          }
        });
        dataFn = dvl.apply({
          args: value,
          fn: function(value) {
            return function(d, i) {
              return [value(d, i)];
            };
          }
        });
        svg = bind({
          parent: selection,
          self: 'svg.sparkline',
          data: dataFn,
          attr: {
            width: width,
            height: height
          }
        });
        return bind({
          parent: svg,
          self: 'path',
          data: function(d) {
            return [d];
          },
          attr: {
            d: lineFn
          }
        });
      };
    }
  };
})();

module.exports = htmlModule;
