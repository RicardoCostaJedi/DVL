// Generated by CoffeeScript 1.6.2
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

dvl.html.dropdown2 = function(_arg) {
  var blankHighlight, classStr, combo, data, dataWithSpacers, disabled, divCont, focus, highlight, id, keepOnClick, listClass, listItems, menuCont, menuOpen, myOnSelect, namespace, onSelect, parent, realDataItems, render, searchText, selection, selectionValue, shownData, spacerDummy, spacers, title, updateScroll, value, valueOut, visible;

  parent = _arg.parent, classStr = _arg.classStr, data = _arg.data, value = _arg.value, selectionValue = _arg.selectionValue, title = _arg.title, render = _arg.render, listClass = _arg["class"], id = _arg.id, selection = _arg.selection, highlight = _arg.highlight, onSelect = _arg.onSelect, keepOnClick = _arg.keepOnClick, visible = _arg.visible, disabled = _arg.disabled, focus = _arg.focus, spacers = _arg.spacers, combo = _arg.combo;
  if (!parent) {
    throw new Error('must have parent');
  }
  if (!data) {
    throw new Error('must have data');
  }
  classStr || (classStr = 'dropdown');
  selection = dvl.wrapVar(selection);
  highlight = dvl.wrapVar(highlight);
  if (render == null) {
    render = dvl.html.dropdown.render.text;
  }
  data = dvl.wrap(data);
  value = dvl.wrap(value || String);
  if (title && !selectionValue) {
    selectionValue = dvl.apply(title, function(_title) {
      return function() {
        return _title;
      };
    });
  }
  selectionValue = dvl.wrap(selectionValue || value);
  keepOnClick = dvl.wrap(keepOnClick || true);
  disabled = dvl.wrap(disabled != null ? disabled : false);
  visible = dvl.wrap(visible != null ? visible : true);
  focus = dvl.wrapVar(focus);
  searchText = dvl(null);
  dvl.debug('searchText', searchText);
  dvl.debug('highlight', highlight);
  spacerDummy = {};
  blankHighlight = {};
  if (listClass != null) {
    listClass = dvl.wrap(listClass);
  } else {
    listClass = dvl.applyAlways([selection, highlight], function(_selection, _highlight) {
      return function(d) {
        return [d === _selection ? 'is-selection' : 'isnt-selection', d === _highlight ? 'is-highlight' : 'isnt-highlight'].join(' ');
      };
    });
  }
  dvl.register({
    listen: data,
    fn: function() {
      var _data, _selection;

      _data = data.value();
      _selection = selection.value();
      if (!_data || __indexOf.call(_data, _selection) < 0) {
        setTimeout((function() {
          return selection.value(null);
        }), 0);
      }
    }
  });
  if (title) {
    title = dvl.wrap(title);
  }
  menuOpen = dvl(false);
  divCont = dvl.bindSingle({
    parent: parent,
    self: 'div',
    attr: {
      "class": dvl.applyAlways({
        args: [classStr, menuOpen, disabled],
        fn: function(_classStr, _menuOpen, _disabled) {
          return [_classStr || '', _menuOpen ? 'open' : 'closed', _disabled ? 'disabled' : ''].join(' ');
        }
      })
    }
  });
  valueOut = dvl.bindSingle({
    parent: divCont,
    self: (combo ? 'input' : 'div') + '.title-cont',
    attr: {
      id: id,
      disabled: dvl.op.iff(disabled, '', null),
      tabIndex: 0
    },
    style: {
      display: dvl.op.iff(visible, null, '')
    },
    on: {
      blur: function() {
        focus.value(false);
      }
    },
    text: combo ? null : dvl.applyAlways(selection, value)
  });
  if (combo) {
    dvl.register({
      listen: [valueOut, selection, selectionValue],
      fn: function() {
        var _ref, _selection, _selectionValue, _valueOut;

        _valueOut = valueOut.value();
        if (!_valueOut) {
          return;
        }
        _selection = selection.value();
        _selectionValue = selectionValue.value();
        console.log(_selectionValue, _selection);
        _valueOut.property('value', (_ref = typeof _selectionValue === "function" ? _selectionValue(_selection) : void 0) != null ? _ref : '');
      }
    });
    shownData = dvl.applyAlways([data, value, searchText], function(_data, _value, _searchText) {
      if (!_searchText) {
        return _data;
      }
      _searchText = _searchText.toLowerCase();
      return _data.filter(function(d) {
        return _value(d).toLowerCase().indexOf(_searchText) !== -1;
      });
    });
    dvl.register({
      listen: [shownData, searchText],
      change: highlight,
      fn: function() {
        if (!(searchText.value() && searchText.hasChanged())) {
          return;
        }
        if (highlight.value() !== blankHighlight) {
          return;
        }
        highlight.value();
      }
    });
  } else {
    shownData = data;
  }
  dvl.register({
    listen: [menuOpen, shownData, searchText],
    change: highlight,
    fn: function() {
      var _highlight, _shownData;

      if (menuOpen.value()) {
        _shownData = shownData.value();
        _highlight = highlight.value();
        if (!(combo && searchText.value() && searchText.hasChanged() && _shownData.indexOf(_highlight) === -1)) {
          return;
        }
        highlight.value(_shownData[0] || blankHighlight);
      } else {
        highlight.value(blankHighlight);
      }
    }
  });
  updateScroll = function() {
    var element, menuContNode, position, scrollIndex, _data, _menuCont;

    _menuCont = menuCont.value();
    _data = data.value();
    if (!(_menuCont && _data)) {
      return;
    }
    scrollIndex = _data.indexOf(highlight.value());
    if (scrollIndex === -1) {
      scrollIndex = _data.indexOf(selection.value());
    }
    if (scrollIndex === -1) {
      return;
    }
    menuContNode = _menuCont.node();
    if (menuContNode.scrollHeight === 0) {
      return;
    }
    element = _menuCont.selectAll('li.item')[0][scrollIndex];
    if (!element) {
      return;
    }
    position = $(element).position();
    menuContNode.scrollTop = 0;
    menuContNode.scrollTop = position.top;
  };
  valueOut.value().on('keydown', dvl.group(function() {
    var highlightIndex, keyCode, _data, _value;

    _data = data.value();
    _value = value.value();
    if (!(_data && _value)) {
      return;
    }
    keyCode = d3.event.which || d3.event.keyCode;
    switch (keyCode) {
      case 9:
        menuOpen.value(false);
        break;
      case 38:
      case 40:
        d3.event.stopPropagation();
        d3.event.preventDefault();
        if (!menuOpen.value()) {
          menuOpen.value(true);
        }
        highlightIndex = _data.indexOf(highlight.value());
        if (highlightIndex === -1 && keyCode === 38) {
          highlightIndex = _data.length;
        }
        if (keyCode === 38) {
          highlightIndex--;
        } else {
          highlightIndex++;
        }
        highlightIndex = Math.min(Math.max(highlightIndex, 0), _data.length - 1);
        highlight.value(_data[highlightIndex]);
        updateScroll();
        break;
      case 13:
      case 27:
        d3.event.stopPropagation();
        d3.event.preventDefault();
        if (keyCode === 13 && highlight.value() !== blankHighlight) {
          selection.value(highlight.value());
        }
        menuOpen.value(false);
    }
    if (combo) {
      setTimeout((function() {
        return searchText.value(valueOut.value().property('value'));
      }), 1);
    }
  }), true);
  if (!combo) {
    valueOut.value().on('keypress', (function() {
      var datum, keyCode, userChar, _data, _i, _len, _value;

      _data = data.value();
      _value = value.value();
      if (!(_data && _value)) {
        return;
      }
      keyCode = d3.event.which || d3.event.keyCode;
      userChar = String.fromCharCode(keyCode).toLowerCase();
      if (!userChar || (keyCode === 9 || keyCode === 38 || keyCode === 40 || keyCode === 13 || keyCode === 27)) {
        return;
      }
      for (_i = 0, _len = _data.length; _i < _len; _i++) {
        datum = _data[_i];
        if (datum && _value(datum).charAt(0).toLowerCase() === userChar) {
          highlight.value(datum);
          updateScroll();
          break;
        }
      }
    }), true);
  }
  dvl.register({
    listen: focus,
    fn: function() {
      var valueOutNode, _focus, _valueOut;

      _valueOut = valueOut.value();
      if (!_valueOut) {
        return;
      }
      _focus = focus.value();
      if (_focus == null) {
        return;
      }
      valueOutNode = _valueOut.node();
      if (_focus === (valueOutNode === document.activeElement)) {
        return;
      }
      setTimeout((function() {
        if (_focus) {
          valueOutNode.focus();
        } else {
          valueOutNode.blur();
        }
      }), 0);
    }
  });
  myOnSelect = function(d, i) {
    if (!keepOnClick.value()) {
      menuOpen.value(false);
    }
    if ((typeof onSelect === "function" ? onSelect(d, i) : void 0) === false) {
      return;
    }
    selection.value(d);
  };
  if (spacers) {
    dataWithSpacers = dvl.applyAlways({
      args: [shownData, spacers, searchText],
      fn: function(_shownData, _spacers, _searchText) {
        var d, i, si, spacerAt, _dataWithSpacers, _i, _j, _len, _len1;

        if (!_shownData) {
          return null;
        }
        if (!(_spacers && !_searchText)) {
          return _shownData;
        }
        spacerAt = {};
        for (_i = 0, _len = _spacers.length; _i < _len; _i++) {
          si = _spacers[_i];
          spacerAt[si] = 1;
        }
        _dataWithSpacers = [];
        for (i = _j = 0, _len1 = _shownData.length; _j < _len1; i = ++_j) {
          d = _shownData[i];
          if (spacerAt[i]) {
            _dataWithSpacers.push(spacerDummy);
          }
          _dataWithSpacers.push(d);
        }
        if (spacerAt[_shownData.length]) {
          _dataWithSpacers.push(spacerDummy);
        }
        return _dataWithSpacers;
      }
    });
  } else {
    dataWithSpacers = shownData;
  }
  menuCont = dvl.bindSingle({
    parent: divCont,
    self: 'ul.menu-cont',
    attr: {
      "class": dvl.applyAlways({
        args: dataWithSpacers,
        fn: function(_data) {
          if (_data && _data.length) {
            return '';
          } else {
            return 'empty';
          }
        }
      })
    },
    style: {
      display: dvl.op.iff(menuOpen, null, 'none')
    }
  });
  listItems = dvl.bind({
    parent: menuCont,
    data: dataWithSpacers,
    self: 'li',
    attr: {
      "class": dvl.op.concat(listClass, function(d) {
        if (d === spacerDummy) {
          return ' spacer';
        } else {
          return ' item';
        }
      })
    },
    on: {
      click: myOnSelect,
      mouseover: function(d) {
        highlight.value(d);
      },
      mouseout: function() {
        highlight.value(blankHighlight);
      }
    }
  });
  realDataItems = dvl.apply({
    args: [menuCont, listItems],
    fn: function(_menuCont) {
      return _menuCont.selectAll('li.item');
    }
  });
  render(realDataItems, value);
  namespace = dvl.namespace('dropdown');
  d3.select(window).on("click." + namespace, (function() {
    var target, _divCont, _menuCont;

    _divCont = divCont.value();
    _menuCont = menuCont.value();
    if (!(_divCont && _menuCont)) {
      return;
    }
    target = d3.event.target;
    if (disabled.value()) {
      return;
    }
    if ($(_menuCont.node()).find(target).length) {
      return;
    }
    if (_divCont.node() === target || $(_divCont.node()).find(target).length) {
      menuOpen.value(!menuOpen.value());
    } else {
      menuOpen.value(false);
    }
  }), true).on("blur." + namespace, function() {
    menuOpen.value(false);
  });
  return {
    node: divCont,
    menuCont: menuCont,
    open: menuOpen,
    focus: focus,
    selection: selection,
    highlight: highlight
  };
};

dvl.html.dropdown.render = {
  text: function(selection, value) {
    dvl.bind({
      parent: selection,
      self: 'span',
      text: value
    });
  }
};
