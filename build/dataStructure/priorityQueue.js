// Generated by CoffeeScript 1.6.2
var PriorityQueue;

PriorityQueue = (function() {
  function PriorityQueue(key) {
    this.key = key;
    this.nodes_ = [];
  }

  PriorityQueue.prototype.length = function() {
    return this.nodes_.length;
  };

  PriorityQueue.prototype.push = function(node) {
    var nodes;

    nodes = this.nodes_;
    nodes.push(node);
    this.moveUp_(nodes.length - 1);
    return this;
  };

  PriorityQueue.prototype.shift = function() {
    var count, nodes, rootNode;

    nodes = this.nodes_;
    count = nodes.length;
    rootNode = nodes[0];
    if (count <= 0) {
      return void 0;
    } else if (count === 1) {
      nodes.pop();
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
    return rootNode;
  };

  PriorityQueue.prototype.moveDown_ = function(index) {
    var count, key, leftChildIndex, node, nodes, rightChildIndex, smallerChildIndex;

    nodes = this.nodes_;
    key = this.key;
    count = nodes.length;
    node = nodes[index];
    while (index < (count >> 1)) {
      leftChildIndex = index * 2 + 1;
      rightChildIndex = leftChildIndex + 1;
      smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex][key] < nodes[leftChildIndex][key] ? rightChildIndex : leftChildIndex;
      if (nodes[smallerChildIndex][key] > node[key]) {
        break;
      }
      nodes[index] = nodes[smallerChildIndex];
      index = smallerChildIndex;
    }
    nodes[index] = node;
  };

  PriorityQueue.prototype.moveUp_ = function(index) {
    var key, node, nodes, parentIndex;

    nodes = this.nodes_;
    key = this.key;
    node = nodes[index];
    while (index > 0) {
      parentIndex = (index - 1) >> 1;
      if (nodes[parentIndex][key] > node[key]) {
        nodes[index] = nodes[parentIndex];
        index = parentIndex;
      } else {
        break;
      }
    }
    nodes[index] = node;
  };

  return PriorityQueue;

})();

module.exports = PriorityQueue;
